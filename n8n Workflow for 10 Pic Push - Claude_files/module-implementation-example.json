{
  "name": "Email Builder - Using Content Alchemist Modules",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "email-builder",
        "responseMode": "responseNode"
      },
      "id": "webhook-email",
      "name": "Email Builder Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse email-specific inputs\nconst input = items[0].json;\n\nreturn [{\n  json: {\n    // Standard brand inputs\n    tone: input.tone || 'professional yet warm',\n    vibes: input.vibes || ['trustworthy', 'helpful', 'expert'],\n    metaphor: input.metaphor || 'a trusted advisor',\n    audience: input.audience || 'potential customers',\n    sampleCopy: input.previousEmails || '',\n    \n    // Email-specific context\n    context: 'email',\n    emailType: input.emailType || 'welcome_sequence',\n    sequenceLength: input.sequenceLength || 5,\n    businessGoal: input.businessGoal || 'nurture_to_sale'\n  }\n}];"
      },
      "id": "email-parser",
      "name": "Email Input Parser",
      "type": "n8n-nodes-base.function",
      "position": [450, 300]
    },
    {
      "parameters": {
        "workflowId": "brand_voice_engine_v1",
        "workflowData": "={{ $json }}"
      },
      "id": "brand-voice-email",
      "name": "Execute: Brand Voice Engine",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [650, 300]
    },
    {
      "parameters": {
        "functionCode": "// Prepare email-specific content request\nconst brandProfile = $json;\nconst emailConfig = $node['email-parser'].json;\n\nreturn [{\n  json: {\n    brand_profile: brandProfile,\n    content_request: {\n      type: 'email_sequence',\n      quantity: emailConfig.sequenceLength,\n      requirements: `${emailConfig.emailType} sequence for ${emailConfig.businessGoal}`,\n      creativity: 0.7,\n      maxTokens: 1500,\n      \n      // Email-specific parameters\n      email_config: {\n        sequence_type: emailConfig.emailType,\n        days_between: [0, 1, 3, 7, 14],\n        escalation_pattern: 'value_ladder',\n        personalization_level: 'medium'\n      }\n    }\n  }\n}];"
      },
      "id": "email-config",
      "name": "Configure Email Request",
      "type": "n8n-nodes-base.function",
      "position": [850, 300]
    },
    {
      "parameters": {
        "workflowId": "content_generator_framework_v1",
        "workflowData": "={{ $json }}"
      },
      "id": "generate-emails",
      "name": "Execute: Content Generator (Emails)",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [1050, 300]
    },
    {
      "parameters": {
        "workflowId": "quality_safety_gate_v1",
        "workflowData": {
          "content": "={{ $json }}",
          "safety_level": "moderate",
          "check_type": "email_marketing"
        }
      },
      "id": "quality-check",
      "name": "Execute: Quality & Safety Gate",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [1250, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.proceed }}",
              "value2": true
            }
          ]
        }
      },
      "id": "quality-router",
      "name": "Quality Check Router",
      "type": "n8n-nodes-base.if",
      "position": [1450, 300]
    },
    {
      "parameters": {
        "workflowId": "alchemist_voice_v1",
        "workflowData": {
          "brand_profile": "={{ $json.content.brand_profile }}",
          "context": {
            "type": "email_launch",
            "product": "email_builder"
          }
        }
      },
      "id": "alchemist-encouragement",
      "name": "Execute: Alchemist Voice",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [1650, 250]
    },
    {
      "parameters": {
        "workflowId": "output_formatter_universal_v1",
        "workflowData": {
          "content": "={{ $node['quality-check'].json.content }}",
          "alchemist_message": "={{ $json }}",
          "format": "email_template",
          "options": {
            "include_preview": true,
            "include_subject_lines": true,
            "include_automation_rules": true
          }
        }
      },
      "id": "format-output",
      "name": "Execute: Output Formatter",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [1850, 300]
    },
    {
      "parameters": {
        "functionCode": "// Handle failed quality check\nconst failureReason = $json.validation.recommendations.join('; ');\n\nreturn [{\n  json: {\n    success: false,\n    error: 'Content quality check failed',\n    reason: failureReason,\n    suggestions: [\n      'Try adjusting your tone to be more positive',\n      'Ensure your message is clear and actionable',\n      'Avoid any potentially sensitive topics'\n    ]\n  }\n}];"
      },
      "id": "handle-failure",
      "name": "Handle Quality Failure",
      "type": "n8n-nodes-base.function",
      "position": [1450, 450]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "webhook_response",
              "value": "={{ JSON.stringify($json) }}"
            }
          ]
        }
      },
      "id": "merge-responses",
      "name": "Merge Responses",
      "type": "n8n-nodes-base.set",
      "position": [2050, 350]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.webhook_response }}",
        "options": {
          "responseCode": "={{ $json.success === false ? 400 : 200 }}"
        }
      },
      "id": "send-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [2250, 350]
    }
  ],
  "connections": {
    "webhook-email": {
      "main": [[{ "node": "email-parser", "type": "main", "index": 0 }]]
    },
    "email-parser": {
      "main": [[{ "node": "brand-voice-email", "type": "main", "index": 0 }]]
    },
    "brand-voice-email": {
      "main": [[{ "node": "email-config", "type": "main", "index": 0 }]]
    },
    "email-config": {
      "main": [[{ "node": "generate-emails", "type": "main", "index": 0 }]]
    },
    "generate-emails": {
      "main": [[{ "node": "quality-check", "type": "main", "index": 0 }]]
    },
    "quality-check": {
      "main": [[{ "node": "quality-router", "type": "main", "index": 0 }]]
    },
    "quality-router": {
      "main": [
        [{ "node": "alchemist-encouragement", "type": "main", "index": 0 }],
        [{ "node": "handle-failure", "type": "main", "index": 0 }]
      ]
    },
    "alchemist-encouragement": {
      "main": [[{ "node": "format-output", "type": "main", "index": 0 }]]
    },
    "format-output": {
      "main": [[{ "node": "merge-responses", "type": "main", "index": 0 }]]
    },
    "handle-failure": {
      "main": [[{ "node": "merge-responses", "type": "main", "index": 0 }]]
    },
    "merge-responses": {
      "main": [[{ "node": "send-response", "type": "main", "index": 0 }]]
    }
  },
  "settings": {},
  "staticData": null,
  "tags": [
    { "name": "content-alchemist" },
    { "name": "email-builder" },
    { "name": "modular-example" }
  ]
}